<h1><?php Helper::translate($_COOKIE['language'],"invertedPendulum") ?></h1>
<form method="POST">
    <div class="form-group">
        <label for="r"><?php Helper::translate($_COOKIE['language'],"rpendulum") ?></label>
        <input type="number" class="form-control" name="r" id="r" step="0.01" required autocomplete="off">
    </div>
    <div class="form-group">
        <label for="time"><?php Helper::translate($_COOKIE['language'],"graphtime") ?></label>
        <input type="range" class="form-control" name="time" id="time" min="5" max="20" step="0.05" value="5" onchange="changeTime(this.value)" required>
        <p id="timetext"></p>
    </div>
    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="animation" name="animation" value="1" checked>
        <label for="animation"><?php Helper::translate($_COOKIE['language'],"animation") ?></label>
    </div>
    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="graph" name="graph" value="1" checked>
        <label for="graph"><?php Helper::translate($_COOKIE['language'],"graph") ?></label>
    </div>
    <div class="form-group">
        <input type="submit" class="btn btn-primary" name="send" value="<?php Helper::translate($_COOKIE['language'],'send') ?>">
    </div>
</form>
<?php
if(isset($_POST['send'])):
    Db::$medoo->update("stats",["visitors[+]" => 1],["page_name"=>"pendulum"]);
    $ir = trim($_POST['r']);
    $ia = 0;
    $ip = 0;
    $arrContextOptions=array(
        "ssl"=>array(
            "verify_peer"=>false,
            "verify_peer_name"=>false,
        ),
        'http' => array('ignore_errors' => true),
    );
    $arr = file_get_contents("https://localhost:443/final/api.php?key=KHt9t83cmV6pfcyfSbcB9jyG7TnJMySYT28CUv2jSMN9RrNj&model=invertedpendulum&r={$ir}&position={$_SESSION['invertedpendulum']}", false, stream_context_create($arrContextOptions));
    $arr = json_decode($arr, true);
    $time = (isset($_POST['time'])) ? $_POST['time']*1000 : "5000";
    $animation = (isset($_POST['animation'])) ? '; animation' : '';
    $graph = (isset($_POST['graph'])) ? '; graph' : '';
    Db::$medoo->insert("commands",[
      "command"=>"Inverted pendulum -> r = " . $_POST['r'] . $animation . $graph,
      "output"=> gettype($arr),
      "success" => "1"
    ]);
    $_SESSION['invertedpendulum'] = $arr['continue'];
    if(isset($_POST['animation']) && $_POST['animation'] = 1): ?>
        <div id='animationContainer' class="animation"></div>
        <script>
          // nastavenie dlzky animacie
          var time = <?= $time ?>;
          // nastavenie koeficientu prepočtu pohybu, rýchlosť pohybu "beam"
          var coeficient = 8;

          let x, y, baseSize, counter = 0;
          let beam_pos = 0;
          let pendulum_rot = 0;
          var interval;
          var position = <?= json_encode($arr['position']); ?>;
          var angle = <?= json_encode($arr['angle']); ?>;

          function startInterval(){
            interval = setInterval(function(){
              intervalRedraw();
            }, time/position.length);
          }

          function intervalRedraw() {
            beam_pos = position[counter]['y'];
            pendulum_rot = angle[counter]['y'];
            redraw();
            counter++;
            if (counter == position.length) {
              clearInterval(interval);
            }
          }

          function preload() {
            pendulum = loadImage('https://147.175.121.210:4480/final/public/img/models/pendulum.svg');
            beam = loadImage('https://147.175.121.210:4480/final/public/img/models/pendulum_beam.svg');
          }

          function setup() {
            var width = document.getElementById('animationContainer').offsetWidth;
            let myCanvas = createCanvas(width, 300);
            myCanvas.parent('animationContainer');
            baseSize = height * 0.4;
            x = width * 0.4;
            y = height * 0.9;
            startInterval();
          }

          function draw() {
            clear();
            push();
            beamMove(x, y, beam_pos*coeficient);
            pendulumMove(0,0,pendulum_rot, beam_pos*coeficient);
            pop();
          }

          function beamMove(x,y,pos){
            translate(x,y);
            image(beam, -(baseSize/2)+pos, 0, baseSize, baseSize*0.1);
          }

          function pendulumMove(x, y, rot, pos) {
            translate(x+pos, y);
            rotate(rot+PI);
            image(pendulum,-(baseSize*0.05),0,baseSize*0.1,baseSize*1.5);
          }

          function windowResized() {
            resizeCanvas(windowWidth, windowHeight);
          }
        </script>
    <?php endif;
    if(isset($_POST['graph']) && $_POST['graph'] = 1): ?>
        <div id="chart" class="graph"></div>
        <script>
            var chart = new CanvasJS.Chart("chart", {
                animationEnabled: true,
                animationDuration: <?= $time ?>,
                exportEnabled: true,
                theme: "dark2", // "light1", "light2", "dark1", "dark2"
                zoomEnabled: true,
                title:{
                    text: "<?php Helper::translate($_COOKIE["language"],"invertedPendulumgraph") ?>"
                },
                data: [{
                    type: "line", //change type to bar, line, area, pie, etc
                    //indexLabel: "{y}", //Shows y value on all Data Points
                    indexLabelFontColor: "#5487c1",
                    indexLabelPlacement: "outside",
                    lineColor: "#5487c1",
                    dataPoints: [{x:0,y:0}]
                },{
                    type: "line", //change type to bar, line, area, pie, etc
                    //indexLabel: "{y}", //Shows y value on all Data Points
                    indexLabelFontColor: "#dc8e39",
                    indexLabelPlacement: "outside",
                    lineColor: "#dc8e39",
                    dataPoints: [{x:0,y:0}]
                }]
            });

            chart.options.data[0].dataPoints = <?= json_encode($arr['position']); ?>;
            chart.options.data[1].dataPoints = <?= json_encode($arr['angle']); ?>;
            chart.render();
        </script>
    <?php endif; ?>
<?php endif;?>
